{"name":"Project template files","body":"Embryo\r\n======\r\n\r\nDescription\r\n-----------\r\n\r\nThese are a standard set of files, scripts, stylesheets, folder structures that I use whenever I start a new web project. Below I discuss the different aspects of it.\r\n\r\nGoogle Pagespeed Module\r\n-----------------------\r\n\r\nOn our Apache server we have the [Google Pagespeed Module](http://code.google.com/p/modpagespeed/) installed so there are certain things that we don't do which we used to. Things like *combining multiple stylesheets into one* we don't do any more because the module handles that, and caches the combined files.\r\n\r\nCSS\r\n--------------------\r\n\r\nThe CSS is 'object-orientated' (OOCSS) as I feel that is the most scalable way to handle projects of any size.\r\n\r\nI disagree with the seemingly common tradition of using a CSS reset (mainly because nearly all of them take a 'scored earth policy' approach). So instead I chose to use something similar but not quite a 'reset': [normalise.css](https://github.com/necolas/normalize.css) which normalises style settings across all browsers (and also fixes some rendering bugs). But what makes normalise so good is that it leaves a lot of the default browser settings in place, because they realise that you end up writing more CSS to work-around the reset than you would have written to work-around the browser defaults! I only had a couple of my own customisations (personal preferences such as the amount of line-height spacing) otherwise the rest of it was fine for me to incorporate into my projects.\r\n\r\nSass\r\n--------------------\r\n\r\nI've started utilising [Sass](http://sass-lang.com/) - being someone who hated the idea of pre-processors (and complained about their failings and how writing OOCSS could resolve a lot of those issues) I appreciate there are some things they do very well that can't be replicated. Plus, knowing all their failings you are better equipped to avoid them when using a pre-processor (if you don't understand the issues with using a pre-processor then I advise you to read my post about [using Sass](https://github.com/Integralist/Blog-Posts/blob/master/Guide-to-using-SASS.md) OR to not use a pre-processor).\r\n\r\nBrowser inconsistencies\r\n--------------------\r\n\r\nWe all know that browsers render both CSS and JavaScript differently depending on their engine. In CSS the way I manage this is by writing my CSS as follows:\r\n\r\n* Write CSS so it works with Firefox\r\n* Use `IE Conditional Comments` to target IE issues**\r\n* Use `@media` hack to target WebKit browsers++\r\n\r\n***I appreciate that IE10 no longer supports conditional comments but IE10's CSS engine should hopefully by then just work!*\r\n\r\n*++It's very rare I have to target a WebKit browser, but once in a blue moon there is a difference in design that I just can't ignore*\r\n\r\nJavaScript\r\n--------------------\r\n\r\nI write all my JavaScript to be compatible with the `AMD` module format.\r\n\r\nThere are a couple of scripts I rarely use nowadays, these being: jQuery (+ two plugins) & SWFObject, but I've included them anyway.\r\n\r\nHere is a round-up of some of the scripts and 'modules' used in this project template:\r\n\r\n* [HTML5Shim](http://www.iecss.com/print-protector/) - \r\n\"IE Print Protector helps IE render HTML5 elements correctly, both on screen and in print.\"\r\n\r\n* [RequireJs](http://www.requirejs.org/) - \r\n\"RequireJS loads plain JavaScript files as well as more defined modules\"\r\n\r\n* [Hogan.js](http://twitter.github.com/hogan.js/) - \r\n\"JavaScript templating from twitter (Mustache compatible)\"\r\n\r\n* [When](https://github.com/briancavalier/when.js#readme) - \r\n\"A lightweight CommonJS Promises/A and when() implementation. It also provides several other useful Promise-related concepts, such as joining and chaining, and has a robust unit test suite.\"\r\n\r\n* [Morpheus](https://github.com/ded/morpheus#readme) - \r\n\"A Brilliant Animator. Morpheus lets you \"tween anything\" in parallel on multiple elements\"\r\n\r\n* [PubSubz](https://github.com/addyosmani/pubsubz#readme) - \r\n\"Just another compact library-agnostic Pub/Sub implementation.\"\r\n\r\n* [Jasmine BDD](http://pivotal.github.com/jasmine/) - \r\n\"Jasmine is a behavior-driven development framework for testing your JavaScript code. It does not depend on any other JavaScript frameworks. It does not require a DOM. And it has a clean, obvious syntax so that you can easily write tests.\"\r\n\r\n* [SinonJs](http://sinonjs.org/) - \"Standalone test spies, stubs and mocks for JavaScript. No dependencies, works with any unit testing framework\"\r\n\r\n* [Google Analytics](http://www.google.com/analytics/) - \r\n\"Google Analytics is the enterprise-class web analytics solution that gives you rich insights into your website traffic and marketing effectiveness\"\r\n\r\n* The following are a list of AMD based modules that I use a lot:\r\n\t* Array utilities (taken from [millermedeiros](https://github.com/millermedeiros/amd-utils))\r\n\t* Checks (such as `isDefined` and `isIE`)\r\n\t* CSS utilities\r\n\t* DOM utilities\r\n\t* Element utilities\r\n\t* Events library (modified from Thomas 'PointedEars' Lahn)\r\n\t* Host utilities\r\n\t* Pattern utilities (such as Dictionary, Observer, Promises)\r\n\t* Polyfills\r\n\t* String utilities\r\n\t* XHR abstraction\r\n\r\n\r\nRequireJs Plugins\r\n--------------------\r\n\r\nThere are a couple of RequireJs plugins we use:\r\n\r\n* [async](https://github.com/millermedeiros/requirejs-plugins) - \r\n\"Useful for JSONP and asynchronous dependencies (e.g. Google Maps)\"\r\n\r\nRequireJs Build Script\r\n--------------------\r\n\r\nI use a custom build script along with the RequireJs' `r.js` optimiser which minifies and concatenates all my scripts into a single file ready for production use.\r\n\r\nDocumentation\r\n--------------------\r\n\r\nI use [Markdown](http://en.wikipedia.org/wiki/Markdown) language for writing my documentation (and also my blog posts) and use Node to convert them into HTML files. \r\n\r\nMiller Medeiros has created [GH Markdown CLI](https://github.com/millermedeiros/gh-markdown-cli) which combines specific Node packages into a program which automates this process using a simple command via the terminal. I've also taken the design from GitHub's CSS to give my documentation a 'cleaner' look and feel.\r\n\r\nHave a read through the [Command.txt](https://github.com/Integralist/Project-Template-Files/blob/master/Assets/Documentation/Command.txt) file to see an example of how you could use it yourself.\r\n\r\nJS Hint\r\n--------------------\r\n\r\nI run my JavaScript through a lint program called [JS Hint](http://www.jshint.org/), but rather than manually process my scripts by hand (e.g. copy/paste each script into the website interface, see errors, fix them, copy/paste updated code to check errors are definitely fixed, rinse & repeat for each script file…) I use a Node package which helps automate this and makes testing my scripts for syntax errors a lot easier.\r\n\r\nCSS Lint\r\n--------------------\r\n\r\nI run my CSS through a lint program called [CSS Lint](http://csslint.net/), but rather than manually process my stylesheets by hand (e.g. copy/paste each stylesheet into the website interface, see errors, fix them, copy/paste updated code to check errors are definitely fixed, rinse & repeat for each stylesheet…) I use a Node package which helps automate this and makes testing my stylesheet for syntax errors a lot easier.","tagline":"These are the new project start-up files I use","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}